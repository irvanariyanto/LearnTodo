__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.Constants = exports.default = undefined;

  var _class, _temp;

  var _react = require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _propTypes = require(_dependencyMap[1]);

  var _propTypes2 = babelHelpers.interopRequireDefault(_propTypes);

  var _lodash = require(_dependencyMap[2]);

  var _reactNative = require(_dependencyMap[3]);

  var CameraManager = _reactNative.NativeModules.ExponentCameraManager || _reactNative.NativeModules.ExponentCameraModule;
  var EventThrottleMs = 500;
  var Camera = (_temp = _class = function (_React$Component) {
    babelHelpers.inherits(Camera, _React$Component);

    function Camera(props) {
      babelHelpers.classCallCheck(this, Camera);

      var _this = babelHelpers.possibleConstructorReturn(this, (Camera.__proto__ || Object.getPrototypeOf(Camera)).call(this, props));

      _this._onCameraReady = function () {
        if (_this.props.onCameraReady) {
          _this.props.onCameraReady();
        }
      };

      _this._onMountError = function (_ref) {
        var nativeEvent = _ref.nativeEvent;

        if (_this.props.onMountError) {
          _this.props.onMountError(nativeEvent);
        }
      };

      _this._onObjectDetected = function (callback) {
        return function (_ref2) {
          var nativeEvent = _ref2.nativeEvent;
          var type = nativeEvent.type;

          if (_this._lastEvents[type] && _this._lastEventsTimes[type] && JSON.stringify(nativeEvent) === _this._lastEvents[type] && new Date() - _this._lastEventsTimes[type] < EventThrottleMs) {
            return;
          }

          if (callback) {
            callback(nativeEvent);
            _this._lastEventsTimes[type] = new Date();
            _this._lastEvents[type] = JSON.stringify(nativeEvent);
          }
        };
      };

      _this._setReference = function (ref) {
        if (ref) {
          _this._cameraRef = ref;
          _this._cameraHandle = (0, _reactNative.findNodeHandle)(ref);
        } else {
          _this._cameraRef = null;
          _this._cameraHandle = null;
        }
      };

      _this._lastEvents = {};
      _this._lastEventsTimes = {};
      return _this;
    }

    babelHelpers.createClass(Camera, [{
      key: "takePictureAsync",
      value: function takePictureAsync(options) {
        return regeneratorRuntime.async(function takePictureAsync$(_context) {
          while (1) {
            switch (_context.prev = _context.next) {
              case 0:
                if (!options) {
                  options = {};
                }

                if (!options.quality) {
                  options.quality = 1;
                }

                _context.next = 4;
                return regeneratorRuntime.awrap(CameraManager.takePicture(options, this._cameraHandle));

              case 4:
                return _context.abrupt("return", _context.sent);

              case 5:
              case "end":
                return _context.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "getSupportedRatiosAsync",
      value: function getSupportedRatiosAsync() {
        return regeneratorRuntime.async(function getSupportedRatiosAsync$(_context2) {
          while (1) {
            switch (_context2.prev = _context2.next) {
              case 0:
                _context2.next = 2;
                return regeneratorRuntime.awrap(CameraManager.getSupportedRatios(this._cameraHandle));

              case 2:
                return _context2.abrupt("return", _context2.sent);

              case 3:
              case "end":
                return _context2.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "recordAsync",
      value: function recordAsync(options) {
        return regeneratorRuntime.async(function recordAsync$(_context3) {
          while (1) {
            switch (_context3.prev = _context3.next) {
              case 0:
                if (!options || typeof options !== 'object') {
                  options = {};
                } else if (typeof options.quality === 'string') {
                  options.quality = Camera.Constants.VideoQuality[options.quality];
                }

                _context3.next = 3;
                return regeneratorRuntime.awrap(CameraManager.record(options, this._cameraHandle));

              case 3:
                return _context3.abrupt("return", _context3.sent);

              case 4:
              case "end":
                return _context3.stop();
            }
          }
        }, null, this);
      }
    }, {
      key: "stopRecording",
      value: function stopRecording() {
        CameraManager.stopRecording(this._cameraHandle);
      }
    }, {
      key: "render",
      value: function render() {
        var nativeProps = this._convertNativeProps(this.props);

        return _react2.default.createElement(ExponentCamera, babelHelpers.extends({}, nativeProps, {
          ref: this._setReference,
          onCameraReady: this._onCameraReady,
          onMountError: this._onMountError,
          onBarCodeRead: this._onObjectDetected(this.props.onBarCodeRead),
          onFacesDetected: this._onObjectDetected(this.props.onFacesDetected)
        }));
      }
    }, {
      key: "_convertNativeProps",
      value: function _convertNativeProps(props) {
        var newProps = (0, _lodash.mapValues)(props, this._convertProp);

        if (props.onBarCodeRead) {
          newProps.barCodeScannerEnabled = true;
        }

        if (props.onFacesDetected) {
          newProps.faceDetectorEnabled = true;
        }

        return newProps;
      }
    }, {
      key: "_convertProp",
      value: function _convertProp(value, key) {
        if (typeof value === 'string' && Camera.ConversionTables[key]) {
          return Camera.ConversionTables[key][value];
        }

        return value;
      }
    }]);
    return Camera;
  }(_react2.default.Component), _class.Constants = {
    Type: CameraManager.Type,
    FlashMode: CameraManager.FlashMode,
    AutoFocus: CameraManager.AutoFocus,
    WhiteBalance: CameraManager.WhiteBalance,
    VideoQuality: CameraManager.VideoQuality,
    BarCodeType: CameraManager.BarCodeType,
    FaceDetection: CameraManager.FaceDetection
  }, _class.ConversionTables = {
    type: CameraManager.Type,
    flashMode: CameraManager.FlashMode,
    autoFocus: CameraManager.AutoFocus,
    whiteBalance: CameraManager.WhiteBalance,
    faceDetectionMode: CameraManager.FaceDetection.Mode,
    faceDetectionLandmarks: CameraManager.FaceDetection.Landmarks,
    faceDetectionClassifications: CameraManager.FaceDetection.Classifications
  }, _class.propTypes = babelHelpers.extends({}, _reactNative.ViewPropTypes, {
    zoom: _propTypes2.default.number,
    ratio: _propTypes2.default.string,
    focusDepth: _propTypes2.default.number,
    onMountError: _propTypes2.default.func,
    onCameraReady: _propTypes2.default.func,
    onBarCodeRead: _propTypes2.default.func,
    onFacesDetected: _propTypes2.default.func,
    faceDetectionMode: _propTypes2.default.number,
    faceDetectionLandmarks: _propTypes2.default.number,
    faceDetectionClassifications: _propTypes2.default.number,
    barCodeTypes: _propTypes2.default.arrayOf(_propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number])),
    type: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    flashMode: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    whiteBalance: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),
    autoFocus: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number, _propTypes2.default.bool])
  }), _class.defaultProps = {
    zoom: 0,
    ratio: '4:3',
    focusDepth: 0,
    type: CameraManager.Type.back,
    autoFocus: CameraManager.AutoFocus.on,
    flashMode: CameraManager.FlashMode.off,
    whiteBalance: CameraManager.WhiteBalance.auto,
    faceDetectionMode: CameraManager.FaceDetection.fast,
    barCodeTypes: Object.values(CameraManager.BarCodeType),
    faceDetectionLandmarks: CameraManager.FaceDetection.Landmarks.none,
    faceDetectionClassifications: CameraManager.FaceDetection.Classifications.none
  }, _temp);
  exports.default = Camera;
  var Constants = exports.Constants = Camera.Constants;
  var ExponentCamera = (0, _reactNative.requireNativeComponent)('ExponentCamera', Camera, {
    nativeOnly: {
      onCameraReady: true,
      onMountError: true,
      onBarCodeRead: true,
      onFaceDetected: true,
      faceDetectorEnabled: true,
      barCodeScannerEnabled: true
    }
  });
});