__d(function (global, require, module, exports, _dependencyMap) {
  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.default = undefined;

  var _react = require(_dependencyMap[0]);

  var _react2 = babelHelpers.interopRequireDefault(_react);

  var _reactNative = require(_dependencyMap[1]);

  var _note = require(_dependencyMap[2]);

  var _note2 = babelHelpers.interopRequireDefault(_note);

  var Main = function (_React$Component) {
    babelHelpers.inherits(Main, _React$Component);

    function Main(props) {
      babelHelpers.classCallCheck(this, Main);

      var _this = babelHelpers.possibleConstructorReturn(this, (Main.__proto__ || Object.getPrototypeOf(Main)).call(this, props));

      _this.state = {
        noteArray: [],
        noteText: ''
      };
      return _this;
    }

    babelHelpers.createClass(Main, [{
      key: "render",
      value: function render() {
        var _this2 = this;

        var notes = this.state.noteArray.map(function (val, key) {
          return _react2.default.createElement(_note2.default, {
            key: key,
            keyval: key,
            val: val,
            deleteMethod: function deleteMethod() {
              return _this2.deleteMethod(key);
            }
          });
        });
        return _react2.default.createElement(
          _reactNative.View,
          {
            style: styles.container
          },
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.header
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.textHeader
              },
              " -Note- "
            )
          ),
          _react2.default.createElement(
            _reactNative.ScrollView,
            {
              style: styles.scrollContriner
            },
            notes
          ),
          _react2.default.createElement(
            _reactNative.View,
            {
              style: styles.footer
            },
            _react2.default.createElement(_reactNative.TextInput, {
              onChangeText: function onChangeText(noteText) {
                return _this2.setState({
                  noteText: noteText
                });
              },
              style: styles.textInput,
              placeholder: "Write note here",
              placeholderTextColor: "white"
            })
          ),
          _react2.default.createElement(
            _reactNative.TouchableOpacity,
            {
              style: styles.addButton,
              onPress: this.addNote.bind(this)
            },
            _react2.default.createElement(
              _reactNative.Text,
              {
                style: styles.addButtonText
              },
              "+"
            )
          )
        );
      }
    }, {
      key: "addNote",
      value: function addNote() {
        if (this.state.noteArray) {
          var d = new Date();
          this.state.noneArray.push({
            'date': d.getFullYear() + '/' + (d.getMount() + 1) + '/' + d.getDate(),
            'note': this.state.noteText
          });
          this.setState({
            noteArray: this.state.noteArray
          });
          this.setState({
            noteText: ''
          });
        }
      }
    }]);
    return Main;
  }(_react2.default.Component);

  exports.default = Main;

  var styles = _reactNative.StyleSheet.create({
    container: {
      flex: 1
    },
    header: {
      backgroundColor: '#E91E63',
      alignItems: 'center',
      justifyContent: 'center',
      borderBottomWidth: 2,
      borderBottomColor: '#ddd'
    },
    textHeader: {
      color: 'white',
      fontSize: 18,
      paddingTop: 40,
      paddingBottom: 15
    },
    scrollContriner: {
      flex: 1,
      marginBottom: 100
    },
    footer: {
      position: 'absolute',
      bottom: 0,
      left: 0,
      right: 0,
      zIndex: 10
    },
    textInput: {
      alignSelf: 'stretch',
      color: '#fff',
      padding: 30,
      backgroundColor: '#252525',
      borderTopWidth: 2,
      borderTopColor: '#ededed'
    },
    addButton: {
      position: 'absolute',
      zIndex: 11,
      right: 10,
      bottom: 90,
      backgroundColor: '#E91E63',
      width: 50,
      height: 50,
      borderRadius: 50,
      alignItems: 'center',
      justifyContent: 'center'
    },
    addButtonText: {
      color: 'white',
      fontSize: 24
    }
  });
});