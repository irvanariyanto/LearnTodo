__d(function (global, require, module, exports, _dependencyMap) {
  'use strict';

  var Image = require(_dependencyMap[0]);

  var ColorPropType = require(_dependencyMap[1]);

  var NativeMethodsMixin = require(_dependencyMap[2]);

  var ReactNativeViewAttributes = require(_dependencyMap[3]);

  var Platform = require(_dependencyMap[4]);

  var React = require(_dependencyMap[5]);

  var PropTypes = require(_dependencyMap[6]);

  var StyleSheet = require(_dependencyMap[7]);

  var ViewPropTypes = require(_dependencyMap[8]);

  var createReactClass = require(_dependencyMap[9]);

  var requireNativeComponent = require(_dependencyMap[10]);

  var Slider = createReactClass({
    displayName: 'Slider',
    mixins: [NativeMethodsMixin],
    propTypes: babelHelpers.extends({}, ViewPropTypes, {
      style: ViewPropTypes.style,
      value: PropTypes.number,
      step: PropTypes.number,
      minimumValue: PropTypes.number,
      maximumValue: PropTypes.number,
      minimumTrackTintColor: ColorPropType,
      maximumTrackTintColor: ColorPropType,
      disabled: PropTypes.bool,
      trackImage: Image.propTypes.source,
      minimumTrackImage: Image.propTypes.source,
      maximumTrackImage: Image.propTypes.source,
      thumbImage: Image.propTypes.source,
      thumbTintColor: ColorPropType,
      onValueChange: PropTypes.func,
      onSlidingComplete: PropTypes.func,
      testID: PropTypes.string
    }),
    getDefaultProps: function getDefaultProps() {
      return {
        disabled: false,
        value: 0,
        minimumValue: 0,
        maximumValue: 1,
        step: 0
      };
    },
    viewConfig: {
      uiViewClassName: 'RCTSlider',
      validAttributes: babelHelpers.extends({}, ReactNativeViewAttributes.RCTView, {
        value: true
      })
    },
    render: function render() {
      var _props = this.props,
          style = _props.style,
          onValueChange = _props.onValueChange,
          onSlidingComplete = _props.onSlidingComplete,
          props = babelHelpers.objectWithoutProperties(_props, ["style", "onValueChange", "onSlidingComplete"]);
      props.style = [styles.slider, style];

      props.onValueChange = onValueChange && function (event) {
        var userEvent = true;
        {
          userEvent = event.nativeEvent.fromUser;
        }
        onValueChange && userEvent && onValueChange(event.nativeEvent.value);
      };

      props.onChange = props.onValueChange;

      props.onSlidingComplete = onSlidingComplete && function (event) {
        onSlidingComplete && onSlidingComplete(event.nativeEvent.value);
      };

      return React.createElement(RCTSlider, babelHelpers.extends({}, props, {
        enabled: !this.props.disabled,
        onStartShouldSetResponder: function onStartShouldSetResponder() {
          return true;
        },
        onResponderTerminationRequest: function onResponderTerminationRequest() {
          return false;
        }
      }));
    }
  });
  var styles = void 0;
  {
    styles = StyleSheet.create({
      slider: {}
    });
  }
  var options = {};
  {
    options = {
      nativeOnly: {
        enabled: true
      }
    };
  }
  var RCTSlider = requireNativeComponent('RCTSlider', Slider, options);
  module.exports = Slider;
});